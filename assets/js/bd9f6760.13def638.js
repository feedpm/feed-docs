"use strict";(self.webpackChunkfeed_docs=self.webpackChunkfeed_docs||[]).push([[6274],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(r),m=s,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,i=new Array(a);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:s,i[1]=o;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},933:function(e,t,r){r.d(t,{Z:function(){return u}});var n=r(7294),s=r(5697),a=r.n(s),i={editedBy:"editedBy_t81w",block:"block_jsl5",label:"label_ynlq",value:"value_H8Hf"},o={name:a().string.isRequired,updated:a().string,date:a().string.isRequired},l=function(e){var t=e.name,r=e.updated,s=e.date;return n.createElement("div",{className:i.editedBy},n.createElement("div",{className:i.block+" "+(s?"":i.single)},n.createElement("span",{className:i.label},"Author"),n.createElement("span",{className:i.value},t)),r?n.createElement("div",{className:i.block+" "+(s?i.double:"")},n.createElement("span",{className:i.label},"Updated by"),n.createElement("span",{className:i.value},r)):null,n.createElement("div",{className:i.block+" "+(s?i.double:"")},n.createElement("span",{className:i.label},"On"),n.createElement("span",{className:i.value},s)))};l.propTypes=o,l.defaultProps={updated:""};var u=l},4315:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var n=r(3117),s=r(102),a=(r(7294),r(3905)),i=r(933),o=["components"],l={id:"persist-store",title:"Redux Persist",sidebar_label:"Redux Persist"},u=void 0,c={unversionedId:"react/training/persist-store",id:"react/training/persist-store",title:"Redux Persist",description:"Redux Persist takes your Redux state object and saves it to persisted storage. Then on app launch it retrieves this persisted state and saves it back to redux.",source:"@site/docs/react/training/persist-store.md",sourceDirName:"react/training",slug:"/react/training/persist-store",permalink:"/feed-docs/docs/react/training/persist-store",draft:!1,editUrl:"https://github.com/feedpm/feed-docs/tree/main/docs/react/training/persist-store.md",tags:[],version:"current",frontMatter:{id:"persist-store",title:"Redux Persist",sidebar_label:"Redux Persist"},sidebar:"docs",previous:{title:"Store",permalink:"/feed-docs/docs/react/training/store-tutorial"},next:{title:"Components-Props-Communication",permalink:"/feed-docs/docs/react/training/components-props-communication"}},p={},d=[{value:"Quickstart",id:"quickstart",level:2},{value:"Dependencies",id:"dependencies",level:3},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Customizing what\u2019s Persisted",id:"customizing-whats-persisted",level:2},{value:"The Merge Process",id:"the-merge-process",level:2},{value:"Nested Persists",id:"nested-persists",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"<code>persistReducer(config, reducer)</code>",id:"persistreducerconfig-reducer",level:4},{value:"<code>persistStore(store, [config, callback])</code>",id:"persiststorestore-config-callback",level:4},{value:"<code>persistor object</code>",id:"persistor-object",level:4}],m={toc:d},f="wrapper";function k(e){var t=e.components,r=(0,s.Z)(e,o);return(0,a.kt)(f,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Redux Persist takes your Redux state object and saves it to persisted storage. Then on app launch it retrieves this persisted state and saves it back to redux."),(0,a.kt)("h2",{id:"quickstart"},"Quickstart"),(0,a.kt)("p",null,"Persist and rehydrate a redux store."),(0,a.kt)("h3",{id:"dependencies"},"Dependencies"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save redux-persist\n\n- OR -\n\nyarn add redux-persist\n")),(0,a.kt)("h3",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("p",null,"When creating your redux store, pass your createStore function a ",(0,a.kt)("a",{parentName:"p",href:"#persistreducerconfig-reducer"},"persistReducer")," that wraps your app\u2019s root reducer. Once your store is created, pass it to the ",(0,a.kt)("a",{parentName:"p",href:"#persiststorestore-config-callback"},"persistStore")," function, which ensures your redux state is saved to persisted storage whenever it changes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// configureStore.js\n\nimport {createStore} from 'redux';\nimport {persistStore, persistReducer} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\nimport rootReducer from './reducers';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default () => {\n  let store = createStore(persistedReducer);\n  let persistor = persistStore(store);\n  return {store, persistor};\n};\n")),(0,a.kt)("p",null,"If you are using React, wrap your root component with PersistGate. This delays the rendering of your app\u2019s UI until your persisted state has been retrieved and saved to redux."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import {PersistGate} from 'redux-persist/integration/react';\n\n// ... normal setup, create store and persistor, import components etc.\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <RootComponent />\n      </PersistGate>\n    </Provider>\n  );\n};\n")),(0,a.kt)("h2",{id:"customizing-whats-persisted"},"Customizing what\u2019s Persisted"),(0,a.kt)("p",null,"If you don\u2019t want to persist a part of your state you could put it in the blacklist. The blacklist is added into the config object that we used when setting up our PersistReducer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const persistConfig = {\n  key: 'root',\n  storage: storage,\n  blacklist: ['navigation'],\n};\n\nconst pReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(pReducer);\nexport const persistor = persistStore(store);\n")),(0,a.kt)("p",null,"If you want to persist only few parts of your state, you could set up them in whitelist."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const persistConfig = {\n  key: 'root',\n  storage: storage,\n  whitelist: ['auth'], // only auth will be persisted\n};\n\nconst pReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(pReducer);\nexport const persistor = persistStore(store);\n")),(0,a.kt)("h2",{id:"the-merge-process"},"The Merge Process"),(0,a.kt)("p",null,"When your app launches, redux sets an initial state. Shortly after this, Redux Persist retrieves your persisted state from storage. Your persisted state then overrides any initial state. The merge process is meant to \u201cjust work\u201d automatically for you. However, you can also take manual control of the process. For example, in older versions of Redux Persist it was common to manage the rehydration process by catching the REHYDRATE action in your reducers and then saving the action\u2019s payload to your redux state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { REHYDRATE } from 'redux-persist';\n\nconst INITIAL_STATE = {\n  currentUser: null,\n  isLoggingIn: false\n};\n\nconst AuthReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n\n    case REHYDRATE:\n      return {\n        ...state,\n        currentUser: action.payload.currentUser\n      };\n\n    // ...handle other cases\n")),(0,a.kt)("p",null,"The REHYDRATE action is dispatched by Redux Persist immediately after your persisted state is obtained from storage. If you return a new state object from the REHYDRATE action, this will be your finalized state. As mentioned though, you don\u2019t need to do this anymore unless you need to customize the way your state is rehydrated."),(0,a.kt)("h2",{id:"nested-persists"},"Nested Persists"),(0,a.kt)("p",null,"Nested persist can be useful for including different storage adapters, code splitting, or deep filtering. For example while blacklist and whitelist only work one level deep, but we can use a nested persist to blacklist a deeper value:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {combineReducers} from 'redux';\nimport {persistReducer} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport {authReducer, otherReducer} from './reducers';\n\nconst rootPersistConfig = {\n  key: 'root',\n  storage: storage,\n  blacklist: ['auth'],\n};\n\nconst authPersistConfig = {\n  key: 'auth',\n  storage: storage,\n  blacklist: ['somethingTemporary'],\n};\n\nconst rootReducer = combineReducers({\n  auth: persistReducer(authPersistConfig, authReducer),\n  other: otherReducer,\n});\n\nexport default persistReducer(rootPersistConfig, rootReducer);\n")),(0,a.kt)("h2",{id:"api-reference"},"API Reference"),(0,a.kt)("h4",{id:"persistreducerconfig-reducer"},(0,a.kt)("inlineCode",{parentName:"h4"},"persistReducer(config, reducer)")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"arguments",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/rt2zz/redux-persist/blob/master/src/types.js#L13-L27"},(0,a.kt)("strong",{parentName:"a"},"config"))," ",(0,a.kt)("em",{parentName:"li"},"object"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"required config: ",(0,a.kt)("inlineCode",{parentName:"li"},"key, storage")),(0,a.kt)("li",{parentName:"ul"},"notable other config: ",(0,a.kt)("inlineCode",{parentName:"li"},"whitelist, blacklist, version, stateReconciler, debug")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"reducer")," ",(0,a.kt)("em",{parentName:"li"},"function"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"any reducer will work, typically this would be the top level reducer returned by ",(0,a.kt)("inlineCode",{parentName:"li"},"combineReducers")))))),(0,a.kt)("li",{parentName:"ul"},"returns an enhanced reducer")),(0,a.kt)("h4",{id:"persiststorestore-config-callback"},(0,a.kt)("inlineCode",{parentName:"h4"},"persistStore(store, [config, callback])")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"arguments",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"store")," ",(0,a.kt)("em",{parentName:"li"},"redux store")," The store to be persisted."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"config")," ",(0,a.kt)("em",{parentName:"li"},"object")," (typically null)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If you want to avoid that the persistence starts immediately after calling ",(0,a.kt)("inlineCode",{parentName:"li"},"persistStore"),", set the option manualPersist. Example: ",(0,a.kt)("inlineCode",{parentName:"li"},"{ manualPersist: true }")," Persistence can then be started at any point with ",(0,a.kt)("inlineCode",{parentName:"li"},"peristor.persist()"),". You usually want to do this if your storage is not ready when the ",(0,a.kt)("inlineCode",{parentName:"li"},"persistStore")," call is made."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"callback")," ",(0,a.kt)("em",{parentName:"li"},"function")," will be called after rehydration is finished."))),(0,a.kt)("li",{parentName:"ul"},"returns ",(0,a.kt)("strong",{parentName:"li"},"persistor")," object")),(0,a.kt)("h4",{id:"persistor-object"},(0,a.kt)("inlineCode",{parentName:"h4"},"persistor object")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the persistor object is returned by persistStore with the following methods:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".purge()"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"purges state from disk and returns a promise"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".flush()"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"immediately writes all pending state to disk and returns a promise"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".pause()"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"pauses persistence"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".persist()"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"resumes persistence")))))),(0,a.kt)(i.Z,{name:"Tessy Thomas",date:"07/05/2020",mdxType:"EditedBy"}))}k.isMDXComponent=!0}}]);